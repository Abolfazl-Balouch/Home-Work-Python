# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hBdXet1c8griZidTar7tZcaP7mw87Bfr
"""

import math
def convert_to_base(number, base):
    result = ""
    while number > 0:
        remainder = number % base
        result = str(remainder) + result
        number //= base
    return result if result else "0"
def divisorGenerator(k):
    large_divisors = []
    for i in range(1, int(math.sqrt(k) + 1)):
        if k % i == 0:
            yield i
            if i*i != k:
                large_divisors.append(k / i)
    for divisor in reversed(large_divisors):
        yield divisor
N = []
B = []
S = []
while True:
  n, b = map(int, input().split())
  if n == -1 and b == -1:
    break
  else:
    N.append(n)
    B.append(b)
for i in B:
  if i < 2 or i > 9:
    print("invalid base!")
    break
  else:
    zipped_lists = zip(N, B)
    for inedexN, indexB in zipped_lists:
      S.append(int(convert_to_base((int(sum((list(divisorGenerator(inedexN)))))), indexB)))
if len(S) != 0:
  print(int(sum(S)/len(B)))