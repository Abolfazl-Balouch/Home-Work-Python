# -*- coding: utf-8 -*-
"""Untitled37.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FW44i7BV-S4XOxzQkD-HlxPpIZbf_ACk
"""

#!pip install numpy
import numpy as np

def find_max_determinant_pair(matrices):
    max_det = float('-inf')
    max_det_pair = None

    for i in range(len(matrices)):
        for j in range(i+1, len(matrices)):
            det_matrix1 = np.linalg.det(matrices[i])
            det_matrix2 = np.linalg.det(matrices[j])

            result_matrix = np.dot(matrices[i], matrices[j]) if det_matrix1 > det_matrix2 else np.dot(matrices[j], matrices[i])

            det_result = np.linalg.det(result_matrix)
            if det_result > max_det:
                max_det = det_result
                max_det_pair = (matrices[i], matrices[j])

    return max_det_pair

def invert_matrix(matrix):
    inverse_matrix = np.linalg.inv(matrix)

    return inverse_matrix

with open("input.txt", "r") as file:
    n, m = map(int, file.readline().split())
    matrices = [np.array([list(map(int, file.readline().split())) for _ in range(m)]) for _ in range(n)]

max_det_pair = find_max_determinant_pair(matrices)

result_matrix = np.dot(max_det_pair[0], max_det_pair[1]) if np.linalg.det(max_det_pair[0]) > np.linalg.det(max_det_pair[1]) else np.dot(max_det_pair[1], max_det_pair[0])

encryption_matrix = invert_matrix(result_matrix)

for row in encryption_matrix:
    print(" ".join(f"{val:.3f}" for val in row))