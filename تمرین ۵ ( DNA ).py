# -*- coding: utf-8 -*-
"""Untitled44.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nVTSLiAKD3HgkZ4Bm2J-OU0BoaTEZeNd
"""

def number_to_list(number):
    number_str = str(number)
    number_list = [int(char) for char in number_str]
    return number_list

def list_to_number(number_list):
    number_str = ''.join(map(str, number_list))
    result_number = int(number_str)
    return result_number

def mergesort(mylist):
    if len(mylist) > 1:
        mid = len(mylist) // 2
        left = mylist[:mid]
        right = mylist[mid:]

        mergesort(left)
        mergesort(right)

        i = 0
        j = 0
        k = 0

        while i < len(left) and j < len(right):
            if left[i] <= right[j]:
              mylist[k] = left[i]
              i += 1
            else:
                mylist[k] = right[j]
                j += 1
            k += 1

        while i < len(left):
            mylist[k] = left[i]
            i += 1
            k += 1

        while j < len(right):
            mylist[k]=right[j]
            j += 1
            k += 1

class MrKrabs:
    def __init__(self, data):
        self.data = data

    def process_data(self):
        self.data += self.data[:10]
        self.data = self.data.replace("tt", "o")
        return self.data


class SpongeBob(MrKrabs):
    def process_data(self):
        super().process_data()

        self.data = self.merge_sort(self.data)
        return self.data
    def merge_sort(self, data):
        my_list = number_to_list(len(data))
        mergesort(my_list)
        return list_to_number(my_list)

class Octopus:
    def __init__(self, data):
        self.data = data

    def process_data(self):
        for i in range(len(self.data)):
            if self.data[i] == 'x':
                self.data = self.data + str(i)
                break

        self.data = self.replace_consecutive_repeated(self.data)

        return self.data

    def replace_consecutive_repeated(self, data):
        result = []
        i = 0

        while i < len(data):
            count = 1
            while i + 1 < len(data) and data[i] == data[i + 1]:
                count += 1
                i += 1

            if count >= 3:
              for _ in range(count // 3):
                result.append("(0_0)")
              for _ in range(count % 3):
                result.append(data[i])
            else:
                result.append(data[i] * count)

            i += 1

        return ''.join(result)


def process_input(input_data):
    if input_data.startswith("m"):
        obj = MrKrabs(input_data)
    elif input_data.startswith("sb"):
        obj = SpongeBob(input_data)
    elif input_data.startswith("s") and input_data[1] != "b":
        obj = Octopus(input_data)
    elif input_data[::-1].startswith("m"):
        obj = MrKrabs(input_data[::-1])
    elif input_data[::-1].startswith("sb"):
        obj = SpongeBob(input_data[::-1])
    elif input_data[::-1].startswith("s") and input_data[::-1][1] != "b":
        obj = Octopus(input_data[::-1])
    else:
        return "invalid input"

    return obj.process_data()


user_input = input()
result = process_input(user_input)
print(result)