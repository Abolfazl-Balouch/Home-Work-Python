# -*- coding: utf-8 -*-
"""Untitled47.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FIpAWdfaSoBpwcWhepzOzEZcKvfqIXYY
"""

import math


class Player:
    flag = True
    players = list()

    def __init__(self) -> None:
        self.soldiers = dict()
        Player.players.append(self)

    @staticmethod
    def info(soldier_id, player):
        try:
            output.append(f'health: {player.soldiers[soldier_id].health}')
            output.append(f'location: {player.soldiers[soldier_id].x} {player.soldiers[soldier_id].y}')
            Player.flag = True
        except KeyError:
            output.append('soldier does not exist')
            Player.flag = False


class Soldier:
    soldiers = dict()
    limit = 10

    def __init__(self, x, y, soldier_id, player) -> None:
        self.x = int(x)
        self.y = int(y)
        self.health = 100
        self.id = soldier_id
        player.soldiers[soldier_id] = self
        Soldier.soldiers[soldier_id] = self
        Player.flag = True

    def distance(self, p):
        x1, y1 = self.x, self.y
        x2, y2 = p[0], p[1]
        return abs(x2 - x1) + abs(y2 - y1)

    def move(self, direction):
        if direction == 'up':
            if self.y > 0:
                self.y -= 1
                Player.flag = True
            else:
                output.append('out of bounds')
                Player.flag = False
        elif direction == 'down':
            if self.y < Soldier.limit:
                self.y += 1
                Player.flag = True
            else:
                output.append('out of bounds')
                Player.flag = False
        elif direction == 'right':
            if self.x < Soldier.limit:
                self.x += 1
                Player.flag = True
            else:
                output.append('out of bounds')
                Player.flag = False
        elif direction == 'left':
            if self.x > 0:
                self.x -= 1
                Player.flag = True
            else:
                output.append('out of bounds')
                Player.flag = False

    def attack(self, target_id, enemy_player):
        enemy = enemy_player.soldiers.get(target_id)
        if enemy:
            if self.distance([enemy.x, enemy.y]) <= self.range:
                enemy.health -= self.damage
                Player.flag = True
                if enemy.health <= 0:
                    enemy_player.soldiers.pop(target_id)
                    output.append('target eliminated')
            else:
                Player.flag = False
                output.append("the target is too far")
        else:
            Player.flag = False
            output.append('soldier does not exist')


class Melee(Soldier):
    def __init__(self, x, y, soldier_id, player) -> None:
        super().__init__(x, y, soldier_id, player)
        self.damage = 20
        self.range = 1


class Archer(Soldier):
    def __init__(self, x, y, soldier_id, player) -> None:
        super().__init__(x, y, soldier_id, player)
        self.damage = 10
        self.range = 2


Soldier.limit = int(input())
output = list()
player1 = Player()
player2 = Player()
current_player = player2

while True:
    if Player.flag:
        if current_player == player2:
            current_player = player1
            next_player = player2
        else:
            current_player = player2
            next_player = player1
    x = input()
    if x == 'end':
        for i in output:
            print(i)
        break
    if x.split()[0] == 'new':
        if x.split()[1] == 'melee':
            try:
                m = current_player.soldiers[x.split()[2]]
                output.append('duplicate tag')
                Player.flag = False
            except KeyError:
                m = Melee(x.split()[3], x.split()[4], x.split()[2], current_player)
        else:
            try:
                a = current_player.soldiers[x.split()[2]]
                output.append('duplicate tag')
                Player.flag = False
            except KeyError:
                m = Archer(x.split()[3], x.split()[4], x.split()[2], current_player)
    if x.split()[0] == 'move':
        current_player.soldiers[x.split()[1]].move(x.split()[2])
    if x.split()[0] == 'info':
        Player.info(x.split()[1], current_player)
    if x.split()[0] == 'who':
        tot_health1 = sum(soldier.health for soldier in player1.soldiers.values())
        tot_health2 = sum(soldier.health for soldier in player2.soldiers.values())
        if tot_health2 > tot_health1:
            output.append('player 2')
        elif tot_health1 > tot_health2:
            output.append('player 1')
        else:
            output.append("draw")
        Player.flag = False
    if x.split()[0] == 'attack':
        current_player.soldiers[x.split()[1]].attack(x.split()[2], next_player)